ee.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-directioneeeeeeeeeeee: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


/* componentDidMount(){
  const{tablelist} = this.props;
  this.setState({
      searchList:tablelist
  })
} */


/* searchHandler = (event) => {

  const value = event.target.value
  console.log("chechk search", value)
  const { tablelist } = this.props;
 
  const searchItem = tablelist.filter(item => {
     
      const result = item.firstName + ' ' + item.lastName;
      return result.toLowerCase().includes(value.toLowerCase())

  })
  console.log("searchItem", searchItem)
  this.setState({
      input: value,
      searchList: searchItem
  })
} */


/* ***********
export const Reducer = (state = initialState, action) => {
    console.log("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", action)

if (action.type === ADD_COMPONENT) {
  console.log('ADD_COMPONENT')
  const newState = { ...state }

  const tempObj = {
      id: newState.counterArray.length, value: 0
  }
  const tempArray = newState.counterArray.concat(tempObj)
  console.log("state.counterArray", newState.counterArray)
  return {
      ...newState,
      counterArray: tempArray
  }

}
if (action.type === INCREMENT) {
  console.log("actionssssssssssssss", action)
  const { id } = action.params
  const newState = { ...state }
  const tempArray = newState.counterArray.map(item => {
      console.log("******temparray", item)
      console.log("aaaaaaaaa", action.params.id)
      if (item.id === id) {

          return {
              id: id,
              value: item.value + 1

          }
      }
      else return item;
  });

  return {
      ...newState,
      counterArray: tempArray
  }
} */




/* // handleAddComponent = () => {
  //   console.log("------------------check function")
  //   const { counterArray } = this.state
  //   // let counter = 0;
  //   const tempObj = {
  //     id: counterArray.length, value: 0
  //   }
  //   counterArray.push(tempObj)
  //   this.setState({
  //     counterArray: counterArray
  //   })
  // } */
